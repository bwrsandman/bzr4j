// Copyright 2009 Victor Iacoban
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions and
// limitations under the License.
package bazaar4idea.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import bazaar4idea.BzrProjectSettings;

import javax.swing.*;
import java.awt.*;
import java.util.ResourceBundle;

public class BzrConfigurationProjectPanel {

  private JPanel m_panel;

  private JCheckBox m_checkIncomingCbx;

  private JCheckBox m_checkOutgoingCbx;
  private JCheckBox m_autoFixRootsCbx;

  private final BzrProjectSettings m_projectSettings;

  public BzrConfigurationProjectPanel(BzrProjectSettings projectSettings) {
    m_projectSettings = projectSettings;
    loadSettings();
  }

  public boolean isModified() {
    return
        m_autoFixRootsCbx.isSelected() != m_projectSettings.isRootCheckingEnabled()
            || m_checkIncomingCbx.isSelected() != m_projectSettings.isCheckIncoming()
            || m_checkOutgoingCbx.isSelected() != m_projectSettings.isCheckOutgoing();
  }

  public void saveSettings() {
    m_projectSettings.setCheckIncoming(m_checkIncomingCbx.isSelected());
    m_projectSettings.setCheckOutgoing(m_checkOutgoingCbx.isSelected());
    m_projectSettings.setRootCheckingEnabled(m_autoFixRootsCbx.isSelected());
  }

  public void loadSettings() {
    m_checkIncomingCbx.setSelected(m_projectSettings.isCheckIncoming());
    m_checkOutgoingCbx.setSelected(m_projectSettings.isCheckOutgoing());
    m_autoFixRootsCbx.setSelected(m_projectSettings.isRootCheckingEnabled());
  }

  public JPanel getPanel() {
    return m_panel;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /** Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    m_panel = new JPanel();
    m_panel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
    final Spacer spacer1 = new Spacer();
    m_panel.add(spacer1,
        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
            GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
    m_panel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Changesets"));
    m_checkIncomingCbx = new JCheckBox();
    m_checkIncomingCbx.setSelected(true);
    m_checkIncomingCbx.setText("Check for incoming changesets");
    m_checkIncomingCbx.setMnemonic('I');
    m_checkIncomingCbx.setDisplayedMnemonicIndex(10);
    panel1.add(m_checkIncomingCbx,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    m_checkOutgoingCbx = new JCheckBox();
    m_checkOutgoingCbx.setSelected(true);
    m_checkOutgoingCbx.setText("Check for outgoing changesets");
    m_checkOutgoingCbx.setMnemonic('O');
    m_checkOutgoingCbx.setDisplayedMnemonicIndex(10);
    panel1.add(m_checkOutgoingCbx,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    m_panel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    panel2.setBorder(BorderFactory.createTitledBorder(
        ResourceBundle.getBundle("org/emergent/bzr4j/intellij/BzrVcsMessages")
            .getString("configpanel.miscellaneous_group.text")));
    m_autoFixRootsCbx = new JCheckBox();
    this.$$$loadButtonText$$$(m_autoFixRootsCbx, ResourceBundle.getBundle("org/emergent/bzr4j/intellij/BzrVcsMessages")
        .getString("configpanel.check_roots_enabled.text"));
    panel2.add(m_autoFixRootsCbx,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /** @noinspection ALL */
  private void $$$loadButtonText$$$(AbstractButton component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /** @noinspection ALL */
  public JComponent $$$getRootComponent$$$() {
    return m_panel;
  }
}
