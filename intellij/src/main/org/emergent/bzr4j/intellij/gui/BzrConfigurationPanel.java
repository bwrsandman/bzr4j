package org.emergent.bzr4j.intellij.gui;

import com.intellij.openapi.components.ServiceManager;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.emergent.bzr4j.commandline.internal.Commander;
import org.emergent.bzr4j.core.BazaarClientPreferences;
import org.emergent.bzr4j.core.BazaarPreference;
import org.emergent.bzr4j.intellij.BzrVcsSettings;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

/**
 * @author Patrik Beno
 */
public class BzrConfigurationPanel
{

    private Project project;

    private JPanel panel;

    private TextFieldWithBrowseButton pathField;

    private JButton testButton;

    public BzrConfigurationPanel( Project project )
    {
        this.project = project;
        testButton.addActionListener( new ActionListener()
        {
            public void actionPerformed( ActionEvent e )
            {
                testConnection();
            }
        } );

        pathField.addBrowseFolderListener(
                "Bazaar Configuration",
                "Select path to bzr executable",
                project,
                new FileChooserDescriptor( true, false, false, false, false, false ) );
    }

    private void testConnection()
    {
        Commander commander = new Commander()
        {
            public File getDefaultWorkDir()
            {
                return null;
            }

            public String getBzrExePath()
            {
                return pathField.getText();
            }
        };

        try
        {
            commander.rawCmd( "plugins" ).exec( true );
        }
        catch (Exception ignored)
        {
            Messages.showErrorDialog( project, "Failed to invoke bzr!", "Bzr Test Result" );
            return;
        }

        try
        {
            commander.rawCmd( "xmlplugins" ).exec( true );
        }
        catch (Exception ignored) 
        {
            Messages.showErrorDialog( project, "You seem to be missing the xmloutput plugin for bzr!", "Bzr Test Result" );
            return;
        }

        Messages.showInfoMessage( project, "Test Passed!", "Bzr Test Result" );
    }

    public JComponent getPanel()
    {
        return panel;
    }

    public void load( BzrVcsSettings settings )
    {
        pathField.setText( settings.getBzrExecutable() );
    }

    public boolean isModified( BzrVcsSettings settings )
    {
        return !settings.getBzrExecutable().equals( pathField.getText() );
    }

    public void save( BzrVcsSettings settings )
    {
        settings.setBzrExecutable( pathField.getText() );
        BazaarClientPreferences.getInstance().set(
                BazaarPreference.EXECUTABLE,
                ServiceManager.getService( BzrVcsSettings.class ).getBzrExecutable() );
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
     * call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        panel = new JPanel();
        panel.setLayout( new GridLayoutManager( 3, 3, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        final JLabel label1 = new JLabel();
        label1.setText( "Path to Bazaar executable: " );
        panel.add( label1, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                false ) );
        pathField = new TextFieldWithBrowseButton();
        panel.add( pathField, new GridConstraints( 0, 1, 1, 2, GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null, null, null, 0, false ) );
        testButton = new JButton();
        testButton.setText( "Test" );
        panel.add( testButton, new GridConstraints( 1, 2, 1, 1, GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, null, null,
                0, false ) );
        final Spacer spacer1 = new Spacer();
        panel.add( spacer1, new GridConstraints( 2, 2, 1, 1, GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_VERTICAL, 1,
                GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null,
                0, false ) );
        final Spacer spacer2 = new Spacer();
        panel.add( spacer2, new GridConstraints( 1, 1, 1, 1, GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null,
                null, 0, false ) );
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return panel;
    }
}
